package post

import (
	"loficode/model"
	"loficode/templates/components"
	"loficode/templates/components/page"
)

templ Post(post model.Post, baseUrl string) {
	@page.Page(
		page.HeadConfig{
			Title:       post.Title + " | loficode",
			Description: post.Summary,
			OgImage:     post.OpenGraphImage,
		},
		[]page.Breadcrumb{
			{Text: "home", Url: "/"},
			{Text: "posts", Url: "/posts.html"},
			{Text: post.Slug, Url: "/posts/" + post.Slug + ".html"},
		},
		content(post, baseUrl),
	)
}

templ content(post model.Post, baseUrl string) {
	<style>
		.related-post {
			max-width: 450px;
		}
	</style>
	<article class="container is-max-desktop">
		<div class="card-image">
			<figure class="image is-3by1">
				<img
					alt="Header Image"
					src={ post.HeaderImage }
				/>
			</figure>
		</div>
		<div class="card-content">
			<div class="media">
				<div class="media-content">
					<h4 class="is-size-4">Cody Potter - Posted on { post.Date.String() }</h4>
					<h1 class="title is-size-1">{ post.Title }</h1>
					<div class="mb-5">
						@components.Tags(components.TagsConfig{
							Size:             "is-medium",
							Tags:             post.Tags,
							EnableNavigation: true,
						})
					</div>
					@SocialButtons(post, baseUrl)
				</div>
			</div>
			<div class="content">
				@templ.Raw(post.Content)
			</div>
			@SocialButtons(post, baseUrl)
		</div>
	</article>
	<div class="container block is-max-desktop mt-5">
		<h4 class="title is-4 mb-5">Comments</h4>
		@components.CommentForm(components.CommentFormConfig{Slug: post.Slug})
		<div class="mt-5">
			<div id="comments-section" hx-get={ "/api/posts/" + post.Slug + "/comments" } hx-trigger="load" hx-swap="outerHTML">
				<p>Loading comments...</p>
			</div>
		</div>
	</div>
	<div class="container p-5 block is-max-desktop">
		<h4 class="title is-4 mb-5">Related Posts</h4>
		<div hx-get={ "/api/post-previews" } hx-trigger="load" hx-swap="outerHTML"></div>
	</div>
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			function getElementById(id) {
				const element = document.getElementById(id);
				if (!element) {
					console.debug(`${id} not found.`);
				}
				return element;
			}

			function handleLocalStorage(key, elementId) {
				const value = localStorage.getItem("loficode."+key);
				const element = getElementById(elementId);
				if (value === "true" && element) {
					console.debug(`${key} is true, hiding ${elementId}.`);
					element.style.display = "none";
				} else if (element) {
					console.debug(`${key} is not true, keeping ${elementId} visible.`);
				}
			}

			function prefillField(localStorageKey, inputId) {
				const value = localStorage.getItem(localStorageKey);
				const input = getElementById(inputId);
				if (value && input) {
					console.debug(`${localStorageKey} found in localStorage, populating ${inputId}.`);
					input.value = value;
				}
			}

			function saveFieldToLocalStorage(inputId, localStorageKey) {
				const input = getElementById(inputId);
				if (input) {
					console.debug(`Saving ${inputId} to ${localStorageKey}.`);
					localStorage.setItem("loficode."+localStorageKey, input.value);
				}
			}

			function saveCheckboxToLocalStorage(checkboxName, localStorageKey) {
				const checkbox = document.querySelector(`input[name='${checkboxName}']`);
				if (checkbox && checkbox.checked) {
					console.debug(`${checkboxName} is checked, saving to ${localStorageKey}.`);
					localStorage.setItem("loficode."+localStorageKey, "true");
				}
			}

			prefillField("commentFormName", "nameInput");
			prefillField("commentFormEmail", "emailInput");

			handleLocalStorage("mailingListSignedUp", "mailingListCheckbox");
			handleLocalStorage("termsAccepted", "termsField");

			const commentForm = getElementById("commentForm");
			if (commentForm) {
				console.debug("Comment form found, setting up event listener.");
				commentForm.addEventListener("submit", function () {
					saveFieldToLocalStorage("nameInput", "commentFormName");
					saveFieldToLocalStorage("emailInput", "commentFormEmail");
					saveCheckboxToLocalStorage("mailingList", "mailingListSignedUp");
					saveCheckboxToLocalStorage("terms", "termsAccepted");
				});
			} else {
				console.debug("Comment form not found, skipping event listener setup.");
			}
		});
	</script>
}
