AWSTemplateFormatVersion: '2010-09-09'
Description: loficode blog stack

Parameters:
  LambdaImageUri:
    Type: String
    Description: URI of the Lambda container image (e.g. <account>.dkr.ecr.<region>.amazonaws.com/blog-api:latest)
  CustomDomainName:
    Type: String
    Default: htmx.loficode.com
    Description: The custom domain name for the API 
  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the custom domain (must be in the same region as the API)

Resources:

  ### DynamoDB Table ###
  BlogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: blog
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ### S3 Bucket for Static Site ###
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: loficode-site
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${StaticSiteBucket.Arn}/*"

  ### S3 Bucket for Media ###
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: loficode-media
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ["*"]
            AllowedMethods: ["GET", "PUT", "POST"]
            AllowedHeaders: ["*"]

  ### IAM User for Media Uploads ###
  MediaUploaderUser:
    Type: AWS::IAM::User
    Properties:
      UserName: media-uploader

  MediaUploaderPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MediaUploaderAccess
      Users:
        - !Ref MediaUploaderUser
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:ListBucket
            Resource:
              - !Sub "${MediaBucket.Arn}"
              - !Sub "${MediaBucket.Arn}/*"

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MediaBucket.Arn}/*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt MediaUploaderUser.Arn
            Action: ["s3:PutObject", "s3:PutObjectAcl"]
            Resource: !Sub "${MediaBucket.Arn}/*"

  ### IAM Role for Lambda ###
  BlogLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: blog-lambda-exec
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BlogLambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt BlogTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "${MediaBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  ### Lambda Function ###
  BlogLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: blog-api
      PackageType: Image
      Code:
        ImageUri: !Ref LambdaImageUri
      Role: !GetAtt BlogLambdaRole.Arn
      Timeout: 15
      Environment:
        Variables:
          LOG_LEVEL: "info"
          ENVIRONMENT: "production"

  ### Lambda API Gateway (HTTP) ###
  BlogApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: blog-api-gw
      ProtocolType: HTTP

  BlogApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BlogApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BlogLambda}
      PayloadFormatVersion: "2.0"

  BlogApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BlogApi
      RouteKey: "ANY /{proxy+}"
      Target: !Sub integrations/${BlogApiIntegration}

  BlogApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BlogApi
      StageName: "$default"
      AutoDeploy: true

  BlogLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BlogLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApi}/*/*/*

  ### API Gateway Custom Domain (for HTTP API) ###
  ApiCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref CustomDomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref BlogApi
      DomainName: !Ref ApiCustomDomain
      Stage: "$default"

  ### CloudFront Distribution ###
  BlogCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: StaticSiteOrigin
            DomainName: !GetAtt StaticSiteBucket.RegionalDomainName
            S3OriginConfig: {}
          - Id: ApiGatewayOrigin
            DomainName: !Ref CustomDomainName
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: StaticSiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: ["*"]
              Cookies:
                Forward: all
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2

Outputs:
  SiteBucket:
    Value: !Ref StaticSiteBucket
    Description: Static site bucket name

  MediaBucket:
    Value: !Ref MediaBucket
    Description: S3 bucket for blog media uploads

  CloudFrontURL:
    Value: !Sub "https://${BlogCloudFrontDistribution.DomainName}"
    Description: CloudFront URL for blog site

  MediaUploaderUserName:
    Value: !Ref MediaUploaderUser
    Description: IAM username for uploading media files to the media bucket

  CloudFrontDistributionId:
    Value: !Ref BlogCloudFrontDistribution
    Description: CloudFront distribution ID

  BlogApiUrl:
    Value: !Sub "https://${BlogApi}.execute-api.${AWS::Region}.amazonaws.com"
    Description: Root URL of the API Gateway

  CustomDomain:
    Value: !Ref CustomDomainName
    Description: Custom domain name for the API
